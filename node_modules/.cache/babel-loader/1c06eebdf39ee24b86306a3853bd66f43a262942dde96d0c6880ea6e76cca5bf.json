{"ast":null,"code":"/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n  function loadShould() {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter,\n      get: shouldGetter,\n      configurable: true\n    });\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n      }\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n        actual: actual,\n        expected: expected,\n        operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    };\n\n    // negation\n    should.not = {};\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    };\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n    return should;\n  }\n  ;\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};","map":{"version":3,"names":["module","exports","chai","util","Assertion","loadShould","shouldGetter","String","Number","Boolean","Symbol","BigInt","valueOf","shouldSetter","value","Object","defineProperty","enumerable","configurable","writable","prototype","set","get","should","fail","actual","expected","message","operator","arguments","length","undefined","AssertionError","equal","val1","val2","msg","to","Throw","fn","errt","errs","exist","val","not","Should"],"sources":["C:/laragon/www/vue-projects/bookstore/node_modules/chai/lib/chai/interface/should.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}