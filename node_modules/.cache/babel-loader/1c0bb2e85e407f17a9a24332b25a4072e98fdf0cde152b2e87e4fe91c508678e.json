{"ast":null,"code":"/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError,\n    flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion(obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n    return util.proxify(this);\n  }\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function () {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function (value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function () {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function (value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n        actual: actual,\n        expected: expected,\n        showDiff: showDiff\n      };\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n      throw new AssertionError(msg, assertionErrorObjectProperties, config.includeStack ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj', {\n    get: function () {\n      return flag(this, 'object');\n    },\n    set: function (val) {\n      flag(this, 'object', val);\n    }\n  });\n};","map":{"version":3,"names":["config","require","module","exports","_chai","util","AssertionError","flag","Assertion","obj","msg","ssfi","lockSsfi","proxify","Object","defineProperty","get","console","warn","includeStack","set","value","showDiff","addProperty","name","fn","prototype","addMethod","addChainableMethod","chainingBehavior","overwriteProperty","overwriteMethod","overwriteChainableMethod","assert","expr","negateMsg","expected","_actual","ok","test","arguments","undefined","getMessage","actual","getActual","assertionErrorObjectProperties","operator","getOperator","val"],"sources":["C:/laragon/www/vue-projects/bookstore/node_modules/chai/lib/chai/assertion.js"],"sourcesContent":["/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}