{"ast":null,"code":"/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n      message = actual;\n      actual = undefined;\n    }\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n      actual: actual,\n      expected: expected,\n      operator: operator\n    }, chai.expect.fail);\n  };\n};","map":{"version":3,"names":["module","exports","chai","util","expect","val","message","Assertion","fail","actual","expected","operator","arguments","length","undefined","AssertionError"],"sources":["C:/laragon/www/vue-projects/bookstore/node_modules/chai/lib/chai/interface/expect.js"],"sourcesContent":["/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAE;EACrCD,IAAI,CAACE,MAAM,GAAG,UAAUC,GAAG,EAAEC,OAAO,EAAE;IACpC,OAAO,IAAIJ,IAAI,CAACK,SAAS,CAACF,GAAG,EAAEC,OAAO,CAAC;EACzC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEEJ,IAAI,CAACE,MAAM,CAACI,IAAI,GAAG,UAAUC,MAAM,EAAEC,QAAQ,EAAEJ,OAAO,EAAEK,QAAQ,EAAE;IAChE,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACtBP,OAAO,GAAGG,MAAM;MAChBA,MAAM,GAAGK,SAAS;IACtB;IAEAR,OAAO,GAAGA,OAAO,IAAI,eAAe;IACpC,MAAM,IAAIJ,IAAI,CAACa,cAAc,CAACT,OAAO,EAAE;MACnCG,MAAM,EAAEA,MAAM;MACdC,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;IACd,CAAC,EAAET,IAAI,CAACE,MAAM,CAACI,IAAI,CAAC;EACtB,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}