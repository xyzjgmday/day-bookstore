{"ast":null,"code":"/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name),\n    _super = function () {};\n  if (_get && 'function' === typeof _get.get) _super = _get.get;\n  Object.defineProperty(ctx, name, {\n    get: function overwritingPropertyGetter() {\n      // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n      // function to be the starting point for removing implementation frames\n      // from the stack trace of a failed assertion.\n      //\n      // However, we only want to use this function as the starting point if\n      // the `lockSsfi` flag isn't set and proxy protection is disabled.\n      //\n      // If the `lockSsfi` flag is set, then either this assertion has been\n      // overwritten by another assertion, or this assertion is being invoked\n      // from inside of another assertion. In the first case, the `ssfi` flag\n      // has already been set by the overwriting assertion. In the second\n      // case, the `ssfi` flag has already been set by the outer assertion.\n      //\n      // If proxy protection is enabled, then the `ssfi` flag has already been\n      // set by the proxy getter.\n      if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n        flag(this, 'ssfi', overwritingPropertyGetter);\n      }\n\n      // Setting the `lockSsfi` flag to `true` prevents the overwritten\n      // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n      // flag is already set to the correct starting point for this assertion.\n      var origLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      var result = getter(_super).call(this);\n      flag(this, 'lockSsfi', origLockSsfi);\n      if (result !== undefined) {\n        return result;\n      }\n      var newAssertion = new chai.Assertion();\n      transferFlags(this, newAssertion);\n      return newAssertion;\n    },\n    configurable: true\n  });\n};","map":{"version":3,"names":["chai","require","flag","isProxyEnabled","transferFlags","module","exports","overwriteProperty","ctx","name","getter","_get","Object","getOwnPropertyDescriptor","_super","get","defineProperty","overwritingPropertyGetter","origLockSsfi","result","call","undefined","newAssertion","Assertion","configurable"],"sources":["C:/laragon/www/vue-projects/bookstore/node_modules/chai/lib/chai/utils/overwriteProperty.js"],"sourcesContent":["/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,YAAY,CAAC;AAChC,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIE,cAAc,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAG,SAASC,iBAAiBA,CAACC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAE;EAC7D,IAAIC,IAAI,GAAGC,MAAM,CAACC,wBAAwB,CAACL,GAAG,EAAEC,IAAI,CAAC;IACjDK,MAAM,GAAG,SAAAA,CAAA,EAAY,CAAC,CAAC;EAE3B,IAAIH,IAAI,IAAI,UAAU,KAAK,OAAOA,IAAI,CAACI,GAAG,EACxCD,MAAM,GAAGH,IAAI,CAACI,GAAG;EAEnBH,MAAM,CAACI,cAAc,CAACR,GAAG,EAAEC,IAAI,EAC7B;IAAEM,GAAG,EAAE,SAASE,yBAAyBA,CAAA,EAAG;MACxC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,CAACd,cAAc,CAAC,CAAC,IAAI,CAACD,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE;QAChDA,IAAI,CAAC,IAAI,EAAE,MAAM,EAAEe,yBAAyB,CAAC;MAC/C;;MAEA;MACA;MACA;MACA,IAAIC,YAAY,GAAGhB,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC;MACzCA,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC;MAC5B,IAAIiB,MAAM,GAAGT,MAAM,CAACI,MAAM,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC;MACtClB,IAAI,CAAC,IAAI,EAAE,UAAU,EAAEgB,YAAY,CAAC;MAEpC,IAAIC,MAAM,KAAKE,SAAS,EAAE;QACxB,OAAOF,MAAM;MACf;MAEA,IAAIG,YAAY,GAAG,IAAItB,IAAI,CAACuB,SAAS,CAAC,CAAC;MACvCnB,aAAa,CAAC,IAAI,EAAEkB,YAAY,CAAC;MACjC,OAAOA,YAAY;IACrB,CAAC;IACDE,YAAY,EAAE;EAClB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}