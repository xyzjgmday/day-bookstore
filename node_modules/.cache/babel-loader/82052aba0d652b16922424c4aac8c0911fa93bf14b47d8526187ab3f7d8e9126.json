{"ast":null,"code":"'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n  return name;\n}\nmodule.exports = getFuncName;","map":{"version":3,"names":["toString","Function","prototype","functionNameMatch","getFuncName","aFunc","name","match","call","module","exports"],"sources":["C:/laragon/www/vue-projects/bookstore/node_modules/get-func-name/index.js"],"sourcesContent":["'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,QAAQ,GAAGC,QAAQ,CAACC,SAAS,CAACF,QAAQ;AAC1C,IAAIG,iBAAiB,GAAG,0DAA0D;AAClF,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;IAC/B,OAAO,IAAI;EACb;EAEA,IAAIC,IAAI,GAAG,EAAE;EACb,IAAI,OAAOL,QAAQ,CAACC,SAAS,CAACI,IAAI,KAAK,WAAW,IAAI,OAAOD,KAAK,CAACC,IAAI,KAAK,WAAW,EAAE;IACvF;IACA,IAAIC,KAAK,GAAGP,QAAQ,CAACQ,IAAI,CAACH,KAAK,CAAC,CAACE,KAAK,CAACJ,iBAAiB,CAAC;IACzD,IAAII,KAAK,EAAE;MACTD,IAAI,GAAGC,KAAK,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,MAAM;IACL;IACAD,IAAI,GAAGD,KAAK,CAACC,IAAI;EACnB;EAEA,OAAOA,IAAI;AACb;AAEAG,MAAM,CAACC,OAAO,GAAGN,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}